package main

import (
    "context"
    "errors"
    "fmt"
    "io/ioutil"
    "log"
    "net"
    "os"
    "regexp"
    "strings"
    shim "github.com/containerd/containerd/runtime/v1/shim/v1"
    "github.com/containerd/ttrpc"
    "github.com/gogo/protobuf/types"
)

func poc(socket string) {
    socket = strings.Replace(socket, "@", "", -1)
    conn, err := net.Dial("unix", "\x00"+socket)
    if err != nil {
        return
    }

    client := ttrpc.NewClient(conn)
    shimClient := shim.NewShimClient(client)
    ctx := context.Background()
    _, err = shimClient.ShimInfo(ctx, &types.Empty{})
    if err != nil {
        return
    }
    fmt.Println("存在 CVE-2020-15257 Docker 逃逸风险")
    os.Exit(0)
}

func main() {
    re, err := regexp.Compile("@/containerd-shim/.*\\.sock")
    if err != nil {
        log.Fatal(err)
    }
    data, err := ioutil.ReadFile("/proc/net/unix")
    if err != nil {
        log.Fatal(err)
    }
    sockets := re.FindAll(data, -1)
    if sockets == nil {
        log.Fatal(errors.New("不存在 CVE-2020-15257 Docker 逃逸风险"))
    }
    socketset := make(map[string]interface{})
    for _, socket := range sockets {
        sockname := string(socket)
        if _, ok := socketset[sockname]; ok {
            continue
        }
        socketset[sockname] = sockname
        poc(sockname)
    }
}
